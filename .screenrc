# -*- mode: sh -*-

# This is how one can set a reattach password:
# password ODSJQf.4IJN7E    # "1234"

activity '^GActivity in window %'
bell_msg '^GBell in window %' # message for bell in bg window
vbell_msg 'Bell in this window (vbell unsupported)'
# xterm has a nice visual bell, so make screen pass it through.
vbell off
vbellwait 1

# detach on hangup
autodetach on

# don't display the copyright page
startup_message off

# emulate .logout message
pow_detach_msg "Screen session of \$LOGNAME \$:cr:\$:nl:ended."

# Make shell "sticky" - bypass shell switching mechanism if it's in use
shell $SHELL

defscrollback 10000

# ANSI mostly works with older screens, until the status line hits
# the right-hand edge of the terminal.
#hardstatus alwayslastline "[0m%?[1;33m%-Lw[0m%?[44;37m%n*%f %t%?(%u)%?[0m%?[1;33m%+Lw%?[0m"
hardstatus alwayslastline "%{=}%?%{+b Y}%-Lw%{-}%?%{= BW}%n*%f %t%?(%u)%?%{-}%?%{+b Y}%+Lw%?%{-}"
# and without colour (FIXME)
# hardstatus alwayslastline "%{=}%?%{+b Y}%-Lw%{-}%?%{= BW}%n*%f %t%?(%u)%?%{-}%?%{+b Y}%+Lw%?%{-}"
# Really old screens don't have %-Lw and %+Lw
#hardstatus alwayslastline "[44;37m%w[0m"

# don't kill window after the process died
# zombie "^["

# C-a is too useful to rebind as a prefix.  This is actually two
# "characters", the first being ^\, and the second \\.
defescape ^\\\
escape ^\\\

# Default startup windows (-t <title>).
# Presumably if I'm using screen I want at least a few windows.
screen
screen
screen
screen
# need pam_xauth
screen su
screen su
#screen sudo zsh
#screen sudo zsh
# start with 0th window
select 0

# Imbeciles!!!!
msgwait 1
# might need this one too
msgminwait 1

# Bind delete to ^?.  kD is termcap-speak for delete (-k uses termcap-speak)
bindkey -k kD stuff "\177"

# Function keys


# F1 is used by Eterm, leave F2-F7 on LHS for per-app bindings.

bindkey -k k8 multiuser off # F8
bindkey -k k9 multiuser on  # F9
# NOTE: to do multiuser, you must have screen setuid root.
# grep screen(1) for 'owner'

# S-left/S-right in Eterm changes windows.
bindkey "[c" next
bindkey "[d" prev

# S-left/S-right in xterm changes windows.
bindkey "[1;2C" next
bindkey "[1;2D" prev

# Move window left/right.  This only works with my patch
# to screen's process.c file.
# Could have used M-left/M-right:
#bindkey "[C" number +1
#bindkey "[D" number -1
# but let's save them for a more common operation, and use
# C-s-PageUp/Down a la galeon.
bindkey "[5@" number -1
bindkey "[6@" number +1

# For split regions, bind C-\ j/k to up/down between regions
bind j focus down
bind k focus up

# Thanks Michael Schroeder for helping me get this working!
#
#termcapinfo xterm* "ks=\E[?1l\E=:ku=\E[A:kd=\E[B:kl=\E[D:kr=\E[C"
#
# Commented out, because as it turns out, ensuring TERM=Eterm
# will work nicer than the above hack.  Here's an 
# explanation of what it does anyway:
#
# \E[? is for DEC private modes.  1 is for Application/Normal
# cursor keys, and l does a DECRST.  \E= sets Application Keypad
# (\E> sets Normal Keypad).  Setting the ks capability to this
# ensures that Eterm never switches to application mode.  We
# want normal mode, since in normal mode, Eterm distinguishes
# between left and S-left:
#   http://www.eterm.org/docs/view.php?doc=ref#keys

# Insert pastes
bindkey -k kI paste .

#####################################################################
# Bindings using eval go last since they don't work on older screens
# and we want all other settings to always take effect.

# Used to use this for quick reordering of windows before writing my patch
# *Note: Input Translation in screen info for correct -k sequences:
#     -k k;    F10
#     -k F1    F11
#     -k F2    F12
bindkey -k k; eval colon 'stuff "number "'

# S-up enters copy mode and enters reverse-isearch from bottom of buffer
# Eterm sequence:
bindkey "[a" eval copy "stuff \^r"
# xterm sequence:
bindkey "[1;2A" eval copy "stuff \^r"

# S-down enters copy mode and enters isearch from top of buffer
# Eterm sequence:
bindkey "[b" eval copy "stuff g\^s"
# xterm sequence:
bindkey "[1;2B" eval copy "stuff g\^s"

# PageUp enters copy mode and goes to top of the page
bindkey -k kP eval copy "stuff H"

# Insert exits copy mode and pastes
bindkey -m -k kI eval 'stuff " "' "paste ."

# Ctrl-PageUp reverse searches for a prompt delimiter, assuming
# use of the 'adam2' prompt theme in zsh.
# It enters copy mode if not already in it, hence both bindings.
# Eterm sequence:
bindkey    "[5\^"  eval copy "stuff kk?---------(\015\^jlllll"
bindkey -m "[5\^"            stuff "kk?---------(\015\^jlllll"
# xterm sequence:
bindkey    "[5;5~" eval copy "stuff kk?---------(\015\^jlllll"
bindkey -m "[5;5~"           stuff "kk?---------(\015\^jlllll"

# Ctrl-PageDown in copy mode forward searches for a prompt delimiter
# Eterm sequence:
bindkey -m "[6\^"           stuff "j/----------(\015\^jlllll"
# xterm sequence:
bindkey -m "[6;5~"          stuff "j/----------(\015\^jlllll"

# Make N search in opposite direction?
#bindkey -m N stuff "?^j"
